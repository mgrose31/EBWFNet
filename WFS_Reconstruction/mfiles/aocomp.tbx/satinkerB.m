function [wgfin,rmsfin,flag,outs] = satinkerB(WFSfrm, wgini, relthresh, thresh, type, mask);
% SYNTAX:
% [wgfin,rmsfin,flag,outs] = satinkerB(WFSfrm, wgini, relthresh, thresh,
%                            type, mask)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DESCRIPTION: 
% Part of the subset of routines in WaveTrain's "aocomp.tbx" for
% analyzing experimental wfs camera frames. "satinkerB.m" replaces 
% "satinker.m", because the latter calls obsoleted Matlab optimization routines.
% ------------------------------------------------------------------------
% Given an initial subaperture segmentation structure wg, typically computed 
% by "wfspixgeom2d.m", optimize the subaperture center locations wg.x and 
% wg.y to best center the wfs spots in the subaperture segmentation
% structure. Best center is defined as minimum rms spot-centroid deviation
% over all subaps defined in the wg structure, or all subaps in mask.
% ------------------------------------------------------------------------
% (1) Minimization is achieved using Matlab's "fminsearch" function; two of
% the parameters in wg are varied, namely the pix coords that 
% define the center of subaperture(1,1) in wg's 2-D subap array; all other
% params are held fixed.
% fminsearch method: Nelder-Mead simplex direct search.
% (2) The objective function to be minimized is defined as a nested function
% within the present routine (Matlab's recommended procedure for passing
% arguments to the objective function called by fminsearch).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUTS:
% WFSfrm [ ] = (2D array) WFS camera intensity data frame to which the 
%              subaps will be best registered.
% wgini [ ] = initial estimate for wg structure (usually generated by 
%             visual inspection of WFSfrm and initial application of 
%             wfspixgeom2d.m).
% relthresh [ ] = relative threshold for subaperture centroid computation.
%                 Enter [] to omit spec.
% thresh [ ] = absolute threshold for subaperture centroid computation.
%              Enter [] to omit spec.
% type [ ] = type of threshold computation:
%            1:shift and truncate, 2: truncate, []: default 1.
% mask [ ] = when performing registration, optimize based only the subset 
%            of subaps specified by mask. Enter [] to use all subaps in wg 
%            rectangle.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUTS:
% wgfin [ ] = optimized subaperture segmentation structure. (Check results 
%         visually using sadraw.m ovelay function).
% rmsfin [ ] = value of objective function at optimization conclusion
% flag [ ] = 1 ==> search procedure achieved convergence
% outs [ ] = structure containing info about the optimization
%
% OTHER ROUTINES REQUIRED:
% Several routines in WaveTrain's aocomp.tbx, and Matlab's fminsearch.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (c) MZA Associates Corporation
% AUTHOR: 26 July 2006:  Boris Venet, MZA Associates Corp.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Id: satinkerB.m 3027 2010-09-21 21:04:10Z amoran $

%% BEGIN_CODE

if (~exist('relthresh','var')), relthresh = 0; end;
if (isempty(relthresh)), relthresh = 0; end;
if (~exist('thresh','var')), thresh = 0; end;
if (isempty(thresh)), thresh = 0; end;
if (~exist('type','var')), type = 1; end;
if (isempty(type)), type = 1; end;
if (~exist('mask','var')), mask = []; end;
if (isempty(mask)), mask = []; end;

nx = wgini.nx; ny = wgini.ny; %# of subaps in x and y dim
x0ini = wgini.x(1); y0ini = wgini.y(1); %subap(1,1) center coords (in pix units, rel to WFSfrm corner)
dx = wgini.dx(1); dy = wgini.dy(1);
pxb = wgini.pxb(1); pyb = wgini.pyb(1);
pxf = wgini.pxf(1); pyf = wgini.pyf(1);
xmax = wgini.xmax; ymax = wgini.ymax;

% OPTIMIZE USING FMINSEARCH -- REQUIRES ONLY CORE MATLAB
% fminsearch uses Nelder-Mead simplex method. 
xy0ini = [x0ini,y0ini];
[xy0fin,rmsfin,flag,outs] = fminsearch(@sarmsdispB,xy0ini); 
    function rmsdisp = sarmsdispB(xy0);
        % Nested function: variable values from the enclosing function are available.
        % Computes objective quantity to be minimized.
        % Input xy0=[x0 y0]: subap1 center coords (the two search params)
        x0 = xy0(1); y0 = xy0(2);
        wg = wfspixgeom2d(nx,x0,dx,pxb,pxf,xmax,ny,y0,dy,pyb,pyf,ymax); 
        [centroid,peakpix,maxval,pixsum] = wfscentroid(WFSfrm,wg,relthresh,thresh,type,mask);
        % centroid = array(2,wg.nx,wg.ny). NOTE: the centroid pix coords 
        % returned by wfscentroid are with respect to the subap centers
        % specified in wg.
        rmsdisp = sqrt( mean(centroid(:).^2) );
    end %function sarmsdispB

% % % TEST: OPTIMIZE USING NON-LINEAR LS: REQUIRES OPTIMIZATION TOOLBOX
% % xy0ini = [x0ini,y0ini];
% % [xy0fin] = lsqnonlin(@Fopt,xy0ini);
% %     function F = Fopt(xy0);
% %         % Nested function: variable values from the enclosing function are available.
% %         % Returns [F(1) ... F(n)], where lsqnonlin will seek to minimize the 
% %         % sum F(1)^2+...+F(n)^2.
% %         x0 = xy0(1); y0 = xy0(2);
% %         wg = wfspixgeom2d(nx,x0,dx,pxb,pxf,xmax,ny,y0,dy,pyb,pyf,ymax); 
% %         [centroid,peakpix,maxval,pixsum] = wfscentroid(WFSfrm,wg,relthresh,thresh,type,mask);
% %         % centroid = array(2,wg.nx,wg.ny). NOTE: the centroid pix coords 
% %         % returned by wfscentroid are with respect to the subap centers
% %         % specified in wg.
% %         F = centroid(:); 
% %         rms = sqrt( mean(centroid(:).^2) ); %diagnostic
% %     end %function Fopt

% Final wg structure in same format as input:
x0 = xy0fin(1); y0 = xy0fin(2);
wgfin = wfspixgeom2d(nx,x0,dx,pxb,pxf,xmax,ny,y0,dy,pyb,pyf,ymax);

end %function satinkerB
